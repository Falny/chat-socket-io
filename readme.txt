
BACKEND
    -Запросы HTTP
    - WebSocket

    HTTP

    > '/get-all-users' - ассинхронная функция get_all_user (request)
            принимает логин пользователя

            Что делает:
                делает запрос в базу данных для получения существующих пользователей, исключая из запроса переданый параметр;
                подключает защиту от CORS;
    
    > '/get-all-chats' - ассинхронная функция get_all_chats (request)
            принимает id комнаты

            Что делает:
                делает запрос в базу данных для получения всех существующих чатов;
                подключает защиту от CORS;

    > '/registr' - ассинхронная функция registr (request)
            принимает логин и пароль пользователя

            Что делает:
                создает хеш пароля;
                добавляет пользователя в базу данных;
                подключает защиту от CORS;

    > '/login' - ассинхронная функция login (request)
            принимает логин и пароль пользователя

            Что делает:
                создает временный токен для пользователя;
                делает запрос в базу данных для инициизации пользователя;
                сверяет пароли;
                подключает защиту от CORS;

    WebSocket

    > connect(sid, environ, auth) - ассинхронная функция
            принимает сид; environ - по умолчанию; login, token через параметр auth

            Что делает:
                проверяет наличие токена\логина в auth;
                делает запрос к бд на наличие токена;
                проводит проверку логина и логина из таблицы user_token;
                добавляет в словарь логин по ключу sid;
                добавляет в словарь sid по логину;
                отправляет событие get_name на фронтенд с логином человека;

    > disconnect(sid) - ассинхронная функция
            принимает параметр sid для выхода из комнаты

    
    > key_created(login1, login2) - синхронная функция
            принимает логин пользователя и логин собеседника для смешивания в одну строку

    > join_room(sid, data) - ассинхронная функция
            принимает sid, данные (логин пользователя, логин собеседника)

            Что делает:
                создает приватную комнату для диалога;
                добавляет комнату в базу данных;

    > message(sid, data) - ассинхронная функция
            принимает sid, данные (логин пользователя, логин собеседника, сообщение)

            Что делает:
                отправляет сообщение на фронтенд;
                добавляет сообщение в базу данных таблицу messages

    > have_room(sid, data) - ассинхронная функция
            принимает sid, данные (номер комнаты)
        
            Что делает:
                проверяет наличие комнаты;
                выгружает сообщения из базы данных (messages);
                отправляет сообщения на фронтенд;


                
БАЗА ДАННЫХ

    > users - таблица с пользователями
        принимает:
            - id INTEGER (AUTOINCREMENT);
            - login TEXT;
            - password TEXT;

    > user_token - таблица с токенами пользователей
        принимает:
            token TEXT;
            user TEXT (login)

    > messages - таблица с сообщениями
        принимает:
            - id INTEGER (AUTOINCREMENT);
            - room TEXT; (принимает токен комнаты -> смотри таблицу rooms)
            - login TEXT;
            - message TEXT;
            - time TEXT; (формат дата-время)
            - isRead BOOLEAN

    > rooms - таблица с номерами комнат и токенами
        принимает:
            - id TEXT (номер комнаты)
            - room TEXT (токен комнаты)

    > user_rooms - таблица с логином пользователя, логином собеседника и комнатой
        она нужна для учета комнат, которые есть у пользователя

        принимает:
            - id TEXT (логин пользователя)
            - rooms JSON (словарь {логин собеседника: номер комнаты})

